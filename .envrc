#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# Handle M1 vs Intel Macs
if [[ "$(uname -m)" == "arm64" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"

  # Fix pyenv installation for 3.9.7 https://github.com/pyenv/pyenv/issues/1768#issuecomment-931750061
  PYTHON_CONFIGURE_OPTS="--build=aarch64-apple-darwin$(uname -r)"
  export PYTHON_CONFIGURE_OPTS
else
  eval "$(/usr/local/bin/brew shellenv)"
fi

function matches() {
  local src_file; src_file="${1}"
  local status_file; status_file="${2}"

  [[ -f "${src_file}" ]] && [[ "$(shasum "${src_file}")" == "$(cat "${status_file}" 2>/dev/null)" ]]
}

function setup_brew() {
  if ! hash brew 2>/dev/null; then
    sudo true # Trigger sudo password prompt so brew doesn't have to and we can skip through the next install prompt
    echo "" | bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi

  if ! matches Brewfile "$(direnv_layout_dir)/status_Brewfile"; then
    echo "Updating brew..."
    brew update
    brew bundle --no-lock
    shasum Brewfile > "$(direnv_layout_dir)/status_Brewfile"
  fi
}

function setup_python() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use "poetry new" or "poetry init" to create one first.'
    exit 2
  fi

  export PYENV_VERSION; PYENV_VERSION="$(head -n 1 .python-version)" # Only use the first version
  local pyenv_python="${HOME}/.pyenv/versions/${PYENV_VERSION}/bin/python"

  # Install python versions
  local status_file; status_file="$(direnv_layout_dir)/status_${PYENV_VERSION}_pyenv"
  if ! matches .python-version "${status_file}"; then
    echo "Installing python ${PYENV_VERSION}"
    pyenv install "${PYENV_VERSION}" --skip-existing
    shasum .python-version > "${status_file}"
  fi
  # Poetry must be installed *before* activating the venvs (ie: outside them).
  if [[ ! -f $HOME/.local/bin/poetry ]]; then
    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | "${pyenv_python}" /dev/stdin -y
  fi
  PATH_add "$HOME/.local/bin"

  export POETRY_ACTIVE=1
  export VIRTUAL_ENV; VIRTUAL_ENV=$(direnv_layout_dir)/python-$PYENV_VERSION
  unset PYTHONHOME

  if [[ ! -d $VIRTUAL_ENV ]]; then
    echo "Creating python ${PYENV_VERSION} venv..."
    $pyenv_python -m venv "$VIRTUAL_ENV"
  fi
  PATH_add "$VIRTUAL_ENV"/bin

  local pyproject_status_file; pyproject_status_file="$(direnv_layout_dir)/status_${PYENV_VERSION}_pyproject.toml"
  local pyproject_lock_file; pyproject_lock_file="$(direnv_layout_dir)/status_${PYENV_VERSION}_poetry.lock"
  if ! matches pyproject.toml "${pyproject_status_file}" || ! matches poetry.lock "${pyproject_lock_file}"; then
    echo "Syncing python ${PYENV_VERSION} venv..."
    # Poetry can be picky. If it detects a "broken" venv, it'll emit short warning and create a different one.
    poetry install -n --remove-untracked
    shasum pyproject.toml > "${pyproject_status_file}"
    shasum poetry.lock > "${pyproject_lock_file}"
  fi
}

function setup_pre_commit() {
  # Don't run for worktrees where .git is a file, not dir
  if [[ -d .git ]]; then
    if ! hash pre-commit 2>/dev/null; then
      curl -sSL https://pre-commit.com/install-local.py | python -
    fi
    for hook in "pre-commit" "pre-push" "prepare-commit-msg"; do
      if [[ ! -f ".git/hooks/$hook" ]]; then
        pre-commit install --install-hooks -t "$hook"
      fi
    done
  fi
}

function setup_secrets() {
  # Source any secrets/tokens
  if [[ -f .envrc.secrets ]]; then
      source_env .envrc.secrets
  fi
}

# If not running within direnv (such as bootstrapping), add the stdlib and auto-allow the env.
if [[ -z "${DIRENV_IN_ENVRC:-}" ]]; then
  eval "$(direnv stdlib)"
  direnv allow
fi

# Set env var default - users may override in .envrc.secrets
export PYLINTRC="${PWD}/pyproject.toml"
export PYTHONBREAKPOINT=ipdb.set_trace

mkdir -p "$(direnv_layout_dir)"
setup_brew
setup_secrets # Allow user to override env vars before setting up other tools
setup_python
setup_pre_commit

path_add PATH "$PWD/bin"
