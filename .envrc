#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# If not running within direnv (such as bootstrapping), add the stdlib and auto-allow the env.
if [[ -z "${DIRENV_IN_ENVRC:-}" ]]; then
  eval "$(direnv stdlib)"
  direnv allow
fi

function matches() {
  local src_file; src_file="${1}"
  local status_file; status_file="${2}"

  [[ -f "${src_file}" ]] && [[ "$(shasum "${src_file}")" == "$(cat "${status_file}" 2>/dev/null)" ]]
}

function setup_brew() {
  if ! hash brew 2>/dev/null; then
    sudo true # Trigger sudo password prompt so brew doesn't have to and we can skip through the next install prompt
    echo "" | bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi

  if ! matches Brewfile "$(direnv_layout_dir)/status_Brewfile"; then
    echo "Updating brew..."
    /usr/local/bin/brew update
    /usr/local/bin/brew bundle --no-lock
    shasum Brewfile > "$(direnv_layout_dir)/status_Brewfile"
  fi
}

function setup_python() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use "poetry new" or "poetry init" to create one first.'
    exit 2
  fi

  # Install python versions
  local python_version
  for python_version in $(head -n 1 .python-version); do
    local status_file; status_file="$(direnv_layout_dir)/status_${python_version}_pyenv"
    if ! matches .python-version "${status_file}"; then
      echo "Installing python ${python_version}"
      pyenv install "${python_version}" --skip-existing
      shasum .python-version > "${status_file}"
    fi
  done
  # Poetry must be installed *before* activating the venvs (ie: outside them).
  if [[ ! -f ~/.poetry/bin/poetry ]]; then
    curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python /dev/stdin --no-modify-path
  fi
  PATH_add "$HOME/.poetry/bin"

  export POETRY_ACTIVE=1
  export PYENV_VERSION=""
  export VIRTUAL_ENV=""
  unset PYTHONHOME
  # Because each python version is prepended to the PATH, add them in reverse order
  for python_version in $(head -n 1 .python-version | tr '\n' ' ' | tac -s' '); do
    local pyenv_python=${HOME}/.pyenv/versions/${python_version}/bin/python

    VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version
    if [[ ! -d $VIRTUAL_ENV ]]; then
      echo "Creating python ${python_version} venv..."
      $pyenv_python -m venv "$VIRTUAL_ENV"
    fi
    PATH_add "$VIRTUAL_ENV"/bin
    PYENV_VERSION="${python_version}${PYENV_VERSION:+:$PYENV_VERSION}"

    local pyproject_status_file; pyproject_status_file="$(direnv_layout_dir)/status_${python_version}_pyproject.toml"
    local pyproject_lock_file; pyproject_lock_file="$(direnv_layout_dir)/status_${python_version}_poetry.lock"
    if ! matches pyproject.toml "${pyproject_status_file}" || ! matches poetry.lock "${pyproject_lock_file}"; then
      echo "Syncing python ${python_version} venv..."
      # Poetry can be picky. If it detects a "broken" venv, it'll emit short warning and create a different one.
      poetry install -n --remove-untracked
      shasum pyproject.toml > "${pyproject_status_file}"
      shasum poetry.lock > "${pyproject_lock_file}"
    fi
  done
}

function setup_pre_commit() {
  if [[ ! -f .git/hooks/pre-commit ]]; then
    curl -sSL https://pre-commit.com/install-local.py | python -
    pre-commit install
    pre-commit install -t pre-push
    pre-commit install-hooks
    touch "$(direnv_layout_dir)/initialized_pre_commit"
  fi
}

function setup_hooks() {
  if [[ -f .envrc.hooks ]]; then
      source_env .envrc.hooks
  fi
}

function setup_secrets() {
  # Source any secrets/tokens
  if [[ -f .envrc.secrets ]]; then
      source_env .envrc.secrets
  fi
}

setup_brew
setup_python
setup_pre_commit
setup_hooks
setup_secrets
