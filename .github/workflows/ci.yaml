name: CI
on:
  pull_request:
  push:
    branches:
    - golden
  release:
    types: [published]
  workflow_dispatch:
env:
  COLUMNS: 120
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        python-version: [3.9.16, 3.10.9, 3.11.1]
    runs-on: ${{ matrix.os }}
    env:
      OS: ${{ matrix.os }}
      PYTHON_VERSION: ${{ matrix.python-version }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        cache: 'poetry'
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install "poetry==1.4.1"
        poetry install --all-extras --no-interaction
    - name: code-checkers
      run: |
        # Configure ruff to annotate commits and skip:
        # - no-commit-to-branch since this will run on merged commits too
        # - pytest so that we can run below with specific flags
        RUFF_FORMAT=github SKIP=no-commit-to-branch,pytest poetry run pre-commit run -a
    - name: pytest
      run: |
        poetry run pytest --cov-report="xml:coverage-${{ matrix.os }}-${{ matrix.python-version }}.xml"
    - uses: codecov/codecov-action@v3.1.1
      with:
        env_vars: OS,PYTHON_VERSION
        fail_ci_if_error: true
        files: coverage-${{ matrix.os }}-${{ matrix.python-version }}.xml
        token: ${{ vars.CODECOV_TOKEN }}

  publish-pypi:
    if: (github.event_name == 'push' && github.ref == 'refs/heads/golden') || (github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v'))
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        cache: 'poetry'
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies and build dists
      run: |
        python -m pip install "poetry==1.4.1"
        poetry install --all-extras --no-interaction
    - name: Publish to TestPyPI
      if: github.event_name == 'push' && github.ref == 'refs/heads/golden'
      run: |
        poetry version "$(echo "$(poetry version -s)+$(git rev-parse HEAD)")"
        poetry build
        poetry config repositories.test-pypi https://test.pypi.org/legacy/
        poetry publish -r "test-pypi" -u "__token__" -p "${{ secrets.TEST_PYPI_TOKEN }}"
    - name: Publish to PyPI and bump version
      if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "Setting the version to the GitHub release tag and publishing..."
        version="$(echo '${{ github.event.release.tag_name }}' | tr -d 'v')"
        poetry version "$version"
        poetry build
        poetry config repositories.test-pypi https://test.pypi.org/legacy/
        poetry publish -r "test-pypi" -u "__token__" -p "${{ secrets.TEST_PYPI_TOKEN }}"
        poetry publish -r "pypi" -u "__token__" -p "${{ secrets.PYPI_TOKEN }}"

        echo "Bumping the patch version, marking as a prerelease, and pushing to the golden branch..."
        new_version="$(poetry version -s prepatch)"
        git add pyproject.toml
        git config --global user.name "Artibot"
        git config --global user.email "artibot@artigraph.dev"
        git commit -s -m "Bump version to $new_version"
        git push origin HEAD:golden
